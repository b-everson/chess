chess game classes


board

chesspiece, each player has 2 rooks, 2 knights, 2 bishops, 1 queen, 1 king, 8 pawns
rooks can move only in a straigt line, knights can move down 3 and over 1 or down 1 and over 3, queens can move diag or straight
king can move 1 square

chesspiece functions & attributes
  position - x & y
  character for representation (K,q,k,b,r,p)
  move 
  available move ---anticipated result of available moves needed for ai player i.e. available moves after available move
  value - king highest, queen high, rook med, knight med, bishop med, pawn low

compPlayer- controls chesspiece objects on one side 


game-- loop until game is over, alternating turns
  draw board after each players turn


 



------misc ideas

piece isVulnerable()
check each peice of comp players 
to see if a player's piece can remove that piece

if no pieces vulnerable, move pieces into position to take enemy pieces, if pawn blocks other pieces move to create hole



problem- position can be vulnerable to multiple pieces at one time

if all vulnerable pieces can be protected, do that- i.e if any piece can remove enemy piece that creates vulnerability 
& block another piece from high value piece, use that piece


for each comp piece
  if(position vulnerable)
    if(!list.contains aggressive piece)
      add aggressive piece to list



-------design issue 
I want the pieces to be able to "see" the available moves, which means 
there needs to be a reference to the board positions & whether or not they
are blocked. 


----another issue, characters are all white, no way to differentiate player's pieces
temp solution - signify with (p1) or (p2)


--movement different for each side, need computer player to move pieces downward



determining if a king is in checkmate---
   -if it can move to a position where it is not vulnerable it is not checkmate
   -if a piece can block the path to the king it is not checkmate
   -if a piece can take out piece that has king in check  & block any moves by other
    pieces it is not checkmate <- problem with current code is that can't 
    check potential moves, only current available moves with checkMoveAvailable()

cycle through each chesspiece, add each possible move to list of BoardPositions
for each boardPosition
  if position.testVital() 
  not in check

6/22/13
boolean testPosition = false <- only true to check a single position

(BoardPosition) 
boolean testVital(Player playerInCheck)
   boolean vital = true
   testPosition = true
   if playerPossibleMoves() includes king's position  
      vital = false
   testPosition = false


game owns a board and two players
player owns pieces

to check available moves for a piece, it must be aware of the board - pass board to player to piece?


piece has boardposition, boardposition has piece? 


king cannot move to any position where he is vulnerable, to check if other 
king can move to a position, you have to ensure it is not vulnerable to other 
pieces  <--maybe a list of currently available moves, set on begin of move() 
then clear upon move


6/23/13
Part of every player move should be to check if that move results in the 
enemy player being in check, so test king piece, if it's position is vulnerable
set check to true, this means that if in check it causes the only available moves
are those that would remove the king from check, which leads to the testVital
function planned above.

One route could be to check if a piece's available moves include the other player's 
king after it moves, but that doesn't include any cases where that move also opens
up a path for another piece to make the king in check, so it might be best to simply
search for any pieces that can put the king in check upon every move. 

6/25/13

Now that game mechanics for check are in place the game needs to handle checkmate. 
Thinking that putting a while loop on main game loop that terminates when either
player's checkmate boolean returns true.

Initial thoughts are that if the player is in check I loop through all of the players pieces,
testing each to see if there is a move available that results in check being false. The
testMove function accomplishes this, and the checkValidMoves() function returns an 
ArrayList of moves for each piece that does not result in putting its player's 
own king in check. 

So from game class, after player moves, check if other player is in checkmate, 
end player turn loop when checkmate, display message congratulatin winner.

From the player class, create a list of possible moves, loop through each 
piece the player owns, adding any valid moves to that list. Then, if count of that 
list is zero, player is in checkmate.

7/6/13
For AI player I want to implement the minimax algorithm. This compares moves by value,
value is determined by a value assigned to pieces. Taking an enemy piece gives a positve score, 
losing one of your own results in negative. 

Without comparing moves of pieces it was unnecessary to keep the originating piece of 
a move in the move function, now to find the best move all available moves from each 
piece must be evaluated, and the added context of originating piece is required. 

7/8/13
So AI Player makes moves to put player in checkmate, but for some reason the pawn is able to 
move 2 spaces forward beyond the first move, unlike the human player, which cannot.  

7/9/13
Minimax function isn't working as intended, the AI player will move pieces out of danger, but 
prioritizes moving towards putting pieces under attack instead of being defensive, so need to 
look into minimax implementation as well as players evaluation of a game state.
With a minor tweak to give a player's own movement being under attack a -1.5 * piece value I believe
that that would give the AIPlayer the proper calculation to not purposely put its own pieces in check,
but with running the program with that change the AI player is not returning moves because there are none more 
favorable than the starting layout.